// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgNetwork.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgNetwork.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_MsgNetwork_2eproto() {
  delete CMsgNetwork::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MsgNetwork_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MsgNetwork_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_MsgMove_2eproto();
  ::protobuf_AddDesc_MsgConnect_2eproto();
  ::protobuf_AddDesc_MsgRoleSelect_2eproto();
  ::protobuf_AddDesc_MsgInproc_2eproto();
  ::protobuf_AddDesc_MsgError_2eproto();
  ::protobuf_AddDesc_MsgRoleInfo_2eproto();
  ::protobuf_AddDesc_MsgLoginStep_2eproto();
  ::protobuf_AddDesc_MsgCommon_2eproto();
  CMsgNetwork::default_instance_ = new CMsgNetwork();
  CMsgNetwork::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgNetwork_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MsgNetwork_2eproto_once_);
void protobuf_AddDesc_MsgNetwork_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MsgNetwork_2eproto_once_,
                 &protobuf_AddDesc_MsgNetwork_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgNetwork_2eproto {
  StaticDescriptorInitializer_MsgNetwork_2eproto() {
    protobuf_AddDesc_MsgNetwork_2eproto();
  }
} static_descriptor_initializer_MsgNetwork_2eproto_;
#endif
bool MESSAGE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10000:
    case 10001:
    case 20000:
    case 20001:
    case 30000:
    case 30001:
    case 40000:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CMsgNetwork::kMsgInprocFieldNumber;
const int CMsgNetwork::kMsgMoveFieldNumber;
const int CMsgNetwork::kMsgConnectFieldNumber;
const int CMsgNetwork::kMsgRoleSelectFieldNumber;
const int CMsgNetwork::kMsgErrorFieldNumber;
const int CMsgNetwork::kMsgRoleInfoFieldNumber;
const int CMsgNetwork::kMsgLoginStepFieldNumber;
const int CMsgNetwork::kMsgCommonFieldNumber;
const int CMsgNetwork::kIdSocketFieldNumber;
const int CMsgNetwork::kBBroadcastFieldNumber;
const int CMsgNetwork::kIdPeerFieldNumber;
#endif  // !_MSC_VER

CMsgNetwork::CMsgNetwork()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgNetwork)
}

void CMsgNetwork::InitAsDefaultInstance() {
}

CMsgNetwork::CMsgNetwork(const CMsgNetwork& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgNetwork)
}

void CMsgNetwork::SharedCtor() {
  _cached_size_ = 0;
  idsocket_ = GOOGLE_ULONGLONG(0);
  bbroadcast_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_RealMessage();
}

CMsgNetwork::~CMsgNetwork() {
  // @@protoc_insertion_point(destructor:CMsgNetwork)
  SharedDtor();
}

void CMsgNetwork::SharedDtor() {
  if (has_RealMessage()) {
    clear_RealMessage();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgNetwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgNetwork& CMsgNetwork::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MsgNetwork_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNetwork_2eproto();
#endif
  return *default_instance_;
}

CMsgNetwork* CMsgNetwork::default_instance_ = NULL;

CMsgNetwork* CMsgNetwork::New(::google::protobuf::Arena* arena) const {
  CMsgNetwork* n = new CMsgNetwork;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgNetwork::clear_RealMessage() {
  switch(RealMessage_case()) {
    case kMsgInproc: {
      delete RealMessage_.msginproc_;
      break;
    }
    case kMsgMove: {
      delete RealMessage_.msgmove_;
      break;
    }
    case kMsgConnect: {
      delete RealMessage_.msgconnect_;
      break;
    }
    case kMsgRoleSelect: {
      delete RealMessage_.msgroleselect_;
      break;
    }
    case kMsgError: {
      delete RealMessage_.msgerror_;
      break;
    }
    case kMsgRoleInfo: {
      delete RealMessage_.msgroleinfo_;
      break;
    }
    case kMsgLoginStep: {
      delete RealMessage_.msgloginstep_;
      break;
    }
    case kMsgCommon: {
      delete RealMessage_.msgcommon_;
      break;
    }
    case REALMESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REALMESSAGE_NOT_SET;
}


void CMsgNetwork::Clear() {
  if (_has_bits_[8 / 32] & 768u) {
    idsocket_ = GOOGLE_ULONGLONG(0);
    bbroadcast_ = false;
  }
  idpeer_.Clear();
  clear_RealMessage();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMsgNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:CMsgNetwork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(800016);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgInproc msgInproc = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msginproc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240018)) goto parse_msgMove;
        break;
      }

      // optional .CMsgMove msgMove = 30002;
      case 30002: {
        if (tag == 240018) {
         parse_msgMove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgmove()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240026)) goto parse_msgConnect;
        break;
      }

      // optional .CMsgConnect msgConnect = 30003;
      case 30003: {
        if (tag == 240026) {
         parse_msgConnect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgconnect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240034)) goto parse_msgRoleSelect;
        break;
      }

      // optional .CMsgRoleSelect msgRoleSelect = 30004;
      case 30004: {
        if (tag == 240034) {
         parse_msgRoleSelect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgroleselect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240042)) goto parse_msgError;
        break;
      }

      // optional .CMsgError msgError = 30005;
      case 30005: {
        if (tag == 240042) {
         parse_msgError:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgerror()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240050)) goto parse_msgRoleInfo;
        break;
      }

      // optional .CMsgRoleInfo msgRoleInfo = 30006;
      case 30006: {
        if (tag == 240050) {
         parse_msgRoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgroleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240058)) goto parse_msgLoginStep;
        break;
      }

      // optional .CMsgLoginStep msgLoginStep = 30007;
      case 30007: {
        if (tag == 240058) {
         parse_msgLoginStep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgloginstep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240066)) goto parse_msgCommon;
        break;
      }

      // optional .CMsgCommon msgCommon = 30008;
      case 30008: {
        if (tag == 240066) {
         parse_msgCommon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgcommon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800000)) goto parse_idSocket;
        break;
      }

      // optional uint64 idSocket = 100000;
      case 100000: {
        if (tag == 800000) {
         parse_idSocket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idsocket_)));
          set_has_idsocket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800008)) goto parse_bBroadcast;
        break;
      }

      // optional bool bBroadcast = 100001;
      case 100001: {
        if (tag == 800008) {
         parse_bBroadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbroadcast_)));
          set_has_bbroadcast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800016)) goto parse_idPeer;
        break;
      }

      // repeated uint64 idPeer = 100002;
      case 100002: {
        if (tag == 800016) {
         parse_idPeer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 3, 800016, input, this->mutable_idpeer())));
        } else if (tag == 800018) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_idpeer())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800016)) goto parse_idPeer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgNetwork)
  return false;
#undef DO_
}

void CMsgNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgNetwork)
  // optional .CMsgInproc msgInproc = 2;
  if (has_msginproc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *RealMessage_.msginproc_, output);
  }

  // optional .CMsgMove msgMove = 30002;
  if (has_msgmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30002, *RealMessage_.msgmove_, output);
  }

  // optional .CMsgConnect msgConnect = 30003;
  if (has_msgconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30003, *RealMessage_.msgconnect_, output);
  }

  // optional .CMsgRoleSelect msgRoleSelect = 30004;
  if (has_msgroleselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30004, *RealMessage_.msgroleselect_, output);
  }

  // optional .CMsgError msgError = 30005;
  if (has_msgerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30005, *RealMessage_.msgerror_, output);
  }

  // optional .CMsgRoleInfo msgRoleInfo = 30006;
  if (has_msgroleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30006, *RealMessage_.msgroleinfo_, output);
  }

  // optional .CMsgLoginStep msgLoginStep = 30007;
  if (has_msgloginstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30007, *RealMessage_.msgloginstep_, output);
  }

  // optional .CMsgCommon msgCommon = 30008;
  if (has_msgcommon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30008, *RealMessage_.msgcommon_, output);
  }

  // optional uint64 idSocket = 100000;
  if (has_idsocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(100000, this->idsocket(), output);
  }

  // optional bool bBroadcast = 100001;
  if (has_bbroadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100001, this->bbroadcast(), output);
  }

  // repeated uint64 idPeer = 100002;
  for (int i = 0; i < this->idpeer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      100002, this->idpeer(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:CMsgNetwork)
}

int CMsgNetwork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[8 / 32] & 768u) {
    // optional uint64 idSocket = 100000;
    if (has_idsocket()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idsocket());
    }

    // optional bool bBroadcast = 100001;
    if (has_bbroadcast()) {
      total_size += 3 + 1;
    }

  }
  // repeated uint64 idPeer = 100002;
  {
    int data_size = 0;
    for (int i = 0; i < this->idpeer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->idpeer(i));
    }
    total_size += 3 * this->idpeer_size() + data_size;
  }

  switch (RealMessage_case()) {
    // optional .CMsgInproc msgInproc = 2;
    case kMsgInproc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RealMessage_.msginproc_);
      break;
    }
    // optional .CMsgMove msgMove = 30002;
    case kMsgMove: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RealMessage_.msgmove_);
      break;
    }
    // optional .CMsgConnect msgConnect = 30003;
    case kMsgConnect: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RealMessage_.msgconnect_);
      break;
    }
    // optional .CMsgRoleSelect msgRoleSelect = 30004;
    case kMsgRoleSelect: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RealMessage_.msgroleselect_);
      break;
    }
    // optional .CMsgError msgError = 30005;
    case kMsgError: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RealMessage_.msgerror_);
      break;
    }
    // optional .CMsgRoleInfo msgRoleInfo = 30006;
    case kMsgRoleInfo: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RealMessage_.msgroleinfo_);
      break;
    }
    // optional .CMsgLoginStep msgLoginStep = 30007;
    case kMsgLoginStep: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RealMessage_.msgloginstep_);
      break;
    }
    // optional .CMsgCommon msgCommon = 30008;
    case kMsgCommon: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *RealMessage_.msgcommon_);
      break;
    }
    case REALMESSAGE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNetwork::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgNetwork*>(&from));
}

void CMsgNetwork::MergeFrom(const CMsgNetwork& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  idpeer_.MergeFrom(from.idpeer_);
  switch (from.RealMessage_case()) {
    case kMsgInproc: {
      mutable_msginproc()->::CMsgInproc::MergeFrom(from.msginproc());
      break;
    }
    case kMsgMove: {
      mutable_msgmove()->::CMsgMove::MergeFrom(from.msgmove());
      break;
    }
    case kMsgConnect: {
      mutable_msgconnect()->::CMsgConnect::MergeFrom(from.msgconnect());
      break;
    }
    case kMsgRoleSelect: {
      mutable_msgroleselect()->::CMsgRoleSelect::MergeFrom(from.msgroleselect());
      break;
    }
    case kMsgError: {
      mutable_msgerror()->::CMsgError::MergeFrom(from.msgerror());
      break;
    }
    case kMsgRoleInfo: {
      mutable_msgroleinfo()->::CMsgRoleInfo::MergeFrom(from.msgroleinfo());
      break;
    }
    case kMsgLoginStep: {
      mutable_msgloginstep()->::CMsgLoginStep::MergeFrom(from.msgloginstep());
      break;
    }
    case kMsgCommon: {
      mutable_msgcommon()->::CMsgCommon::MergeFrom(from.msgcommon());
      break;
    }
    case REALMESSAGE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_idsocket()) {
      set_idsocket(from.idsocket());
    }
    if (from.has_bbroadcast()) {
      set_bbroadcast(from.bbroadcast());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMsgNetwork::CopyFrom(const CMsgNetwork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNetwork::IsInitialized() const {

  if (has_msginproc()) {
    if (!this->msginproc().IsInitialized()) return false;
  }
  if (has_msgmove()) {
    if (!this->msgmove().IsInitialized()) return false;
  }
  if (has_msgconnect()) {
    if (!this->msgconnect().IsInitialized()) return false;
  }
  if (has_msgroleselect()) {
    if (!this->msgroleselect().IsInitialized()) return false;
  }
  if (has_msgerror()) {
    if (!this->msgerror().IsInitialized()) return false;
  }
  if (has_msgroleinfo()) {
    if (!this->msgroleinfo().IsInitialized()) return false;
  }
  if (has_msgloginstep()) {
    if (!this->msgloginstep().IsInitialized()) return false;
  }
  if (has_msgcommon()) {
    if (!this->msgcommon().IsInitialized()) return false;
  }
  return true;
}

void CMsgNetwork::Swap(CMsgNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNetwork::InternalSwap(CMsgNetwork* other) {
  std::swap(idsocket_, other->idsocket_);
  std::swap(bbroadcast_, other->bbroadcast_);
  idpeer_.UnsafeArenaSwap(&other->idpeer_);
  std::swap(RealMessage_, other->RealMessage_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CMsgNetwork::GetTypeName() const {
  return "CMsgNetwork";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgNetwork

// optional .CMsgInproc msgInproc = 2;
bool CMsgNetwork::has_msginproc() const {
  return RealMessage_case() == kMsgInproc;
}
void CMsgNetwork::set_has_msginproc() {
  _oneof_case_[0] = kMsgInproc;
}
void CMsgNetwork::clear_msginproc() {
  if (has_msginproc()) {
    delete RealMessage_.msginproc_;
    clear_has_RealMessage();
  }
}
 const ::CMsgInproc& CMsgNetwork::msginproc() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.msgInproc)
  return has_msginproc() ? *RealMessage_.msginproc_
                      : ::CMsgInproc::default_instance();
}
 ::CMsgInproc* CMsgNetwork::mutable_msginproc() {
  if (!has_msginproc()) {
    clear_RealMessage();
    set_has_msginproc();
    RealMessage_.msginproc_ = new ::CMsgInproc;
  }
  // @@protoc_insertion_point(field_mutable:CMsgNetwork.msgInproc)
  return RealMessage_.msginproc_;
}
 ::CMsgInproc* CMsgNetwork::release_msginproc() {
  if (has_msginproc()) {
    clear_has_RealMessage();
    ::CMsgInproc* temp = RealMessage_.msginproc_;
    RealMessage_.msginproc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CMsgNetwork::set_allocated_msginproc(::CMsgInproc* msginproc) {
  clear_RealMessage();
  if (msginproc) {
    set_has_msginproc();
    RealMessage_.msginproc_ = msginproc;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgNetwork.msgInproc)
}

// optional .CMsgMove msgMove = 30002;
bool CMsgNetwork::has_msgmove() const {
  return RealMessage_case() == kMsgMove;
}
void CMsgNetwork::set_has_msgmove() {
  _oneof_case_[0] = kMsgMove;
}
void CMsgNetwork::clear_msgmove() {
  if (has_msgmove()) {
    delete RealMessage_.msgmove_;
    clear_has_RealMessage();
  }
}
 const ::CMsgMove& CMsgNetwork::msgmove() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.msgMove)
  return has_msgmove() ? *RealMessage_.msgmove_
                      : ::CMsgMove::default_instance();
}
 ::CMsgMove* CMsgNetwork::mutable_msgmove() {
  if (!has_msgmove()) {
    clear_RealMessage();
    set_has_msgmove();
    RealMessage_.msgmove_ = new ::CMsgMove;
  }
  // @@protoc_insertion_point(field_mutable:CMsgNetwork.msgMove)
  return RealMessage_.msgmove_;
}
 ::CMsgMove* CMsgNetwork::release_msgmove() {
  if (has_msgmove()) {
    clear_has_RealMessage();
    ::CMsgMove* temp = RealMessage_.msgmove_;
    RealMessage_.msgmove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CMsgNetwork::set_allocated_msgmove(::CMsgMove* msgmove) {
  clear_RealMessage();
  if (msgmove) {
    set_has_msgmove();
    RealMessage_.msgmove_ = msgmove;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgNetwork.msgMove)
}

// optional .CMsgConnect msgConnect = 30003;
bool CMsgNetwork::has_msgconnect() const {
  return RealMessage_case() == kMsgConnect;
}
void CMsgNetwork::set_has_msgconnect() {
  _oneof_case_[0] = kMsgConnect;
}
void CMsgNetwork::clear_msgconnect() {
  if (has_msgconnect()) {
    delete RealMessage_.msgconnect_;
    clear_has_RealMessage();
  }
}
 const ::CMsgConnect& CMsgNetwork::msgconnect() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.msgConnect)
  return has_msgconnect() ? *RealMessage_.msgconnect_
                      : ::CMsgConnect::default_instance();
}
 ::CMsgConnect* CMsgNetwork::mutable_msgconnect() {
  if (!has_msgconnect()) {
    clear_RealMessage();
    set_has_msgconnect();
    RealMessage_.msgconnect_ = new ::CMsgConnect;
  }
  // @@protoc_insertion_point(field_mutable:CMsgNetwork.msgConnect)
  return RealMessage_.msgconnect_;
}
 ::CMsgConnect* CMsgNetwork::release_msgconnect() {
  if (has_msgconnect()) {
    clear_has_RealMessage();
    ::CMsgConnect* temp = RealMessage_.msgconnect_;
    RealMessage_.msgconnect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CMsgNetwork::set_allocated_msgconnect(::CMsgConnect* msgconnect) {
  clear_RealMessage();
  if (msgconnect) {
    set_has_msgconnect();
    RealMessage_.msgconnect_ = msgconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgNetwork.msgConnect)
}

// optional .CMsgRoleSelect msgRoleSelect = 30004;
bool CMsgNetwork::has_msgroleselect() const {
  return RealMessage_case() == kMsgRoleSelect;
}
void CMsgNetwork::set_has_msgroleselect() {
  _oneof_case_[0] = kMsgRoleSelect;
}
void CMsgNetwork::clear_msgroleselect() {
  if (has_msgroleselect()) {
    delete RealMessage_.msgroleselect_;
    clear_has_RealMessage();
  }
}
 const ::CMsgRoleSelect& CMsgNetwork::msgroleselect() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.msgRoleSelect)
  return has_msgroleselect() ? *RealMessage_.msgroleselect_
                      : ::CMsgRoleSelect::default_instance();
}
 ::CMsgRoleSelect* CMsgNetwork::mutable_msgroleselect() {
  if (!has_msgroleselect()) {
    clear_RealMessage();
    set_has_msgroleselect();
    RealMessage_.msgroleselect_ = new ::CMsgRoleSelect;
  }
  // @@protoc_insertion_point(field_mutable:CMsgNetwork.msgRoleSelect)
  return RealMessage_.msgroleselect_;
}
 ::CMsgRoleSelect* CMsgNetwork::release_msgroleselect() {
  if (has_msgroleselect()) {
    clear_has_RealMessage();
    ::CMsgRoleSelect* temp = RealMessage_.msgroleselect_;
    RealMessage_.msgroleselect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CMsgNetwork::set_allocated_msgroleselect(::CMsgRoleSelect* msgroleselect) {
  clear_RealMessage();
  if (msgroleselect) {
    set_has_msgroleselect();
    RealMessage_.msgroleselect_ = msgroleselect;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgNetwork.msgRoleSelect)
}

// optional .CMsgError msgError = 30005;
bool CMsgNetwork::has_msgerror() const {
  return RealMessage_case() == kMsgError;
}
void CMsgNetwork::set_has_msgerror() {
  _oneof_case_[0] = kMsgError;
}
void CMsgNetwork::clear_msgerror() {
  if (has_msgerror()) {
    delete RealMessage_.msgerror_;
    clear_has_RealMessage();
  }
}
 const ::CMsgError& CMsgNetwork::msgerror() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.msgError)
  return has_msgerror() ? *RealMessage_.msgerror_
                      : ::CMsgError::default_instance();
}
 ::CMsgError* CMsgNetwork::mutable_msgerror() {
  if (!has_msgerror()) {
    clear_RealMessage();
    set_has_msgerror();
    RealMessage_.msgerror_ = new ::CMsgError;
  }
  // @@protoc_insertion_point(field_mutable:CMsgNetwork.msgError)
  return RealMessage_.msgerror_;
}
 ::CMsgError* CMsgNetwork::release_msgerror() {
  if (has_msgerror()) {
    clear_has_RealMessage();
    ::CMsgError* temp = RealMessage_.msgerror_;
    RealMessage_.msgerror_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CMsgNetwork::set_allocated_msgerror(::CMsgError* msgerror) {
  clear_RealMessage();
  if (msgerror) {
    set_has_msgerror();
    RealMessage_.msgerror_ = msgerror;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgNetwork.msgError)
}

// optional .CMsgRoleInfo msgRoleInfo = 30006;
bool CMsgNetwork::has_msgroleinfo() const {
  return RealMessage_case() == kMsgRoleInfo;
}
void CMsgNetwork::set_has_msgroleinfo() {
  _oneof_case_[0] = kMsgRoleInfo;
}
void CMsgNetwork::clear_msgroleinfo() {
  if (has_msgroleinfo()) {
    delete RealMessage_.msgroleinfo_;
    clear_has_RealMessage();
  }
}
 const ::CMsgRoleInfo& CMsgNetwork::msgroleinfo() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.msgRoleInfo)
  return has_msgroleinfo() ? *RealMessage_.msgroleinfo_
                      : ::CMsgRoleInfo::default_instance();
}
 ::CMsgRoleInfo* CMsgNetwork::mutable_msgroleinfo() {
  if (!has_msgroleinfo()) {
    clear_RealMessage();
    set_has_msgroleinfo();
    RealMessage_.msgroleinfo_ = new ::CMsgRoleInfo;
  }
  // @@protoc_insertion_point(field_mutable:CMsgNetwork.msgRoleInfo)
  return RealMessage_.msgroleinfo_;
}
 ::CMsgRoleInfo* CMsgNetwork::release_msgroleinfo() {
  if (has_msgroleinfo()) {
    clear_has_RealMessage();
    ::CMsgRoleInfo* temp = RealMessage_.msgroleinfo_;
    RealMessage_.msgroleinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CMsgNetwork::set_allocated_msgroleinfo(::CMsgRoleInfo* msgroleinfo) {
  clear_RealMessage();
  if (msgroleinfo) {
    set_has_msgroleinfo();
    RealMessage_.msgroleinfo_ = msgroleinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgNetwork.msgRoleInfo)
}

// optional .CMsgLoginStep msgLoginStep = 30007;
bool CMsgNetwork::has_msgloginstep() const {
  return RealMessage_case() == kMsgLoginStep;
}
void CMsgNetwork::set_has_msgloginstep() {
  _oneof_case_[0] = kMsgLoginStep;
}
void CMsgNetwork::clear_msgloginstep() {
  if (has_msgloginstep()) {
    delete RealMessage_.msgloginstep_;
    clear_has_RealMessage();
  }
}
 const ::CMsgLoginStep& CMsgNetwork::msgloginstep() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.msgLoginStep)
  return has_msgloginstep() ? *RealMessage_.msgloginstep_
                      : ::CMsgLoginStep::default_instance();
}
 ::CMsgLoginStep* CMsgNetwork::mutable_msgloginstep() {
  if (!has_msgloginstep()) {
    clear_RealMessage();
    set_has_msgloginstep();
    RealMessage_.msgloginstep_ = new ::CMsgLoginStep;
  }
  // @@protoc_insertion_point(field_mutable:CMsgNetwork.msgLoginStep)
  return RealMessage_.msgloginstep_;
}
 ::CMsgLoginStep* CMsgNetwork::release_msgloginstep() {
  if (has_msgloginstep()) {
    clear_has_RealMessage();
    ::CMsgLoginStep* temp = RealMessage_.msgloginstep_;
    RealMessage_.msgloginstep_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CMsgNetwork::set_allocated_msgloginstep(::CMsgLoginStep* msgloginstep) {
  clear_RealMessage();
  if (msgloginstep) {
    set_has_msgloginstep();
    RealMessage_.msgloginstep_ = msgloginstep;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgNetwork.msgLoginStep)
}

// optional .CMsgCommon msgCommon = 30008;
bool CMsgNetwork::has_msgcommon() const {
  return RealMessage_case() == kMsgCommon;
}
void CMsgNetwork::set_has_msgcommon() {
  _oneof_case_[0] = kMsgCommon;
}
void CMsgNetwork::clear_msgcommon() {
  if (has_msgcommon()) {
    delete RealMessage_.msgcommon_;
    clear_has_RealMessage();
  }
}
 const ::CMsgCommon& CMsgNetwork::msgcommon() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.msgCommon)
  return has_msgcommon() ? *RealMessage_.msgcommon_
                      : ::CMsgCommon::default_instance();
}
 ::CMsgCommon* CMsgNetwork::mutable_msgcommon() {
  if (!has_msgcommon()) {
    clear_RealMessage();
    set_has_msgcommon();
    RealMessage_.msgcommon_ = new ::CMsgCommon;
  }
  // @@protoc_insertion_point(field_mutable:CMsgNetwork.msgCommon)
  return RealMessage_.msgcommon_;
}
 ::CMsgCommon* CMsgNetwork::release_msgcommon() {
  if (has_msgcommon()) {
    clear_has_RealMessage();
    ::CMsgCommon* temp = RealMessage_.msgcommon_;
    RealMessage_.msgcommon_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CMsgNetwork::set_allocated_msgcommon(::CMsgCommon* msgcommon) {
  clear_RealMessage();
  if (msgcommon) {
    set_has_msgcommon();
    RealMessage_.msgcommon_ = msgcommon;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgNetwork.msgCommon)
}

// optional uint64 idSocket = 100000;
bool CMsgNetwork::has_idsocket() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgNetwork::set_has_idsocket() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgNetwork::clear_has_idsocket() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgNetwork::clear_idsocket() {
  idsocket_ = GOOGLE_ULONGLONG(0);
  clear_has_idsocket();
}
 ::google::protobuf::uint64 CMsgNetwork::idsocket() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.idSocket)
  return idsocket_;
}
 void CMsgNetwork::set_idsocket(::google::protobuf::uint64 value) {
  set_has_idsocket();
  idsocket_ = value;
  // @@protoc_insertion_point(field_set:CMsgNetwork.idSocket)
}

// optional bool bBroadcast = 100001;
bool CMsgNetwork::has_bbroadcast() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgNetwork::set_has_bbroadcast() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgNetwork::clear_has_bbroadcast() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgNetwork::clear_bbroadcast() {
  bbroadcast_ = false;
  clear_has_bbroadcast();
}
 bool CMsgNetwork::bbroadcast() const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.bBroadcast)
  return bbroadcast_;
}
 void CMsgNetwork::set_bbroadcast(bool value) {
  set_has_bbroadcast();
  bbroadcast_ = value;
  // @@protoc_insertion_point(field_set:CMsgNetwork.bBroadcast)
}

// repeated uint64 idPeer = 100002;
int CMsgNetwork::idpeer_size() const {
  return idpeer_.size();
}
void CMsgNetwork::clear_idpeer() {
  idpeer_.Clear();
}
 ::google::protobuf::uint64 CMsgNetwork::idpeer(int index) const {
  // @@protoc_insertion_point(field_get:CMsgNetwork.idPeer)
  return idpeer_.Get(index);
}
 void CMsgNetwork::set_idpeer(int index, ::google::protobuf::uint64 value) {
  idpeer_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgNetwork.idPeer)
}
 void CMsgNetwork::add_idpeer(::google::protobuf::uint64 value) {
  idpeer_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgNetwork.idPeer)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgNetwork::idpeer() const {
  // @@protoc_insertion_point(field_list:CMsgNetwork.idPeer)
  return idpeer_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgNetwork::mutable_idpeer() {
  // @@protoc_insertion_point(field_mutable_list:CMsgNetwork.idPeer)
  return &idpeer_;
}

bool CMsgNetwork::has_RealMessage() const {
  return RealMessage_case() != REALMESSAGE_NOT_SET;
}
void CMsgNetwork::clear_has_RealMessage() {
  _oneof_case_[0] = REALMESSAGE_NOT_SET;
}
CMsgNetwork::RealMessageCase CMsgNetwork::RealMessage_case() const {
  return CMsgNetwork::RealMessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
