// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgConnect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgConnect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_MsgConnect_2eproto() {
  delete CMsgConnect::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MsgConnect_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MsgConnect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CMsgConnect::default_instance_ = new CMsgConnect();
  CMsgConnect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgConnect_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MsgConnect_2eproto_once_);
void protobuf_AddDesc_MsgConnect_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MsgConnect_2eproto_once_,
                 &protobuf_AddDesc_MsgConnect_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgConnect_2eproto {
  StaticDescriptorInitializer_MsgConnect_2eproto() {
    protobuf_AddDesc_MsgConnect_2eproto();
  }
} static_descriptor_initializer_MsgConnect_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CMsgConnect::kIdAccountFieldNumber;
const int CMsgConnect::kSzSessionIDFieldNumber;
#endif  // !_MSC_VER

CMsgConnect::CMsgConnect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgConnect)
}

void CMsgConnect::InitAsDefaultInstance() {
}

CMsgConnect::CMsgConnect(const CMsgConnect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgConnect)
}

void CMsgConnect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  idaccount_ = GOOGLE_ULONGLONG(0);
  szsessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConnect::~CMsgConnect() {
  // @@protoc_insertion_point(destructor:CMsgConnect)
  SharedDtor();
}

void CMsgConnect::SharedDtor() {
  szsessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgConnect& CMsgConnect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MsgConnect_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MsgConnect_2eproto();
#endif
  return *default_instance_;
}

CMsgConnect* CMsgConnect::default_instance_ = NULL;

CMsgConnect* CMsgConnect::New(::google::protobuf::Arena* arena) const {
  CMsgConnect* n = new CMsgConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgConnect::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    idaccount_ = GOOGLE_ULONGLONG(0);
    if (has_szsessionid()) {
      szsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CMsgConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:CMsgConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 idAccount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idaccount_)));
          set_has_idaccount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szSessionID;
        break;
      }

      // optional string szSessionID = 2;
      case 2: {
        if (tag == 18) {
         parse_szSessionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szsessionid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgConnect)
  return false;
#undef DO_
}

void CMsgConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgConnect)
  // required uint64 idAccount = 1;
  if (has_idaccount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->idaccount(), output);
  }

  // optional string szSessionID = 2;
  if (has_szsessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szsessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:CMsgConnect)
}

int CMsgConnect::ByteSize() const {
  int total_size = 0;

  // required uint64 idAccount = 1;
  if (has_idaccount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->idaccount());
  }
  // optional string szSessionID = 2;
  if (has_szsessionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szsessionid());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgConnect*>(&from));
}

void CMsgConnect::MergeFrom(const CMsgConnect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idaccount()) {
      set_idaccount(from.idaccount());
    }
    if (from.has_szsessionid()) {
      set_has_szsessionid();
      szsessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szsessionid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CMsgConnect::CopyFrom(const CMsgConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMsgConnect::Swap(CMsgConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConnect::InternalSwap(CMsgConnect* other) {
  std::swap(idaccount_, other->idaccount_);
  szsessionid_.Swap(&other->szsessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CMsgConnect::GetTypeName() const {
  return "CMsgConnect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgConnect

// required uint64 idAccount = 1;
bool CMsgConnect::has_idaccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgConnect::set_has_idaccount() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgConnect::clear_has_idaccount() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgConnect::clear_idaccount() {
  idaccount_ = GOOGLE_ULONGLONG(0);
  clear_has_idaccount();
}
 ::google::protobuf::uint64 CMsgConnect::idaccount() const {
  // @@protoc_insertion_point(field_get:CMsgConnect.idAccount)
  return idaccount_;
}
 void CMsgConnect::set_idaccount(::google::protobuf::uint64 value) {
  set_has_idaccount();
  idaccount_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnect.idAccount)
}

// optional string szSessionID = 2;
bool CMsgConnect::has_szsessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgConnect::set_has_szsessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgConnect::clear_has_szsessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgConnect::clear_szsessionid() {
  szsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_szsessionid();
}
 const ::std::string& CMsgConnect::szsessionid() const {
  // @@protoc_insertion_point(field_get:CMsgConnect.szSessionID)
  return szsessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgConnect::set_szsessionid(const ::std::string& value) {
  set_has_szsessionid();
  szsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgConnect.szSessionID)
}
 void CMsgConnect::set_szsessionid(const char* value) {
  set_has_szsessionid();
  szsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgConnect.szSessionID)
}
 void CMsgConnect::set_szsessionid(const char* value, size_t size) {
  set_has_szsessionid();
  szsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgConnect.szSessionID)
}
 ::std::string* CMsgConnect::mutable_szsessionid() {
  set_has_szsessionid();
  // @@protoc_insertion_point(field_mutable:CMsgConnect.szSessionID)
  return szsessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgConnect::release_szsessionid() {
  clear_has_szsessionid();
  return szsessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgConnect::set_allocated_szsessionid(::std::string* szsessionid) {
  if (szsessionid != NULL) {
    set_has_szsessionid();
  } else {
    clear_has_szsessionid();
  }
  szsessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szsessionid);
  // @@protoc_insertion_point(field_set_allocated:CMsgConnect.szSessionID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
